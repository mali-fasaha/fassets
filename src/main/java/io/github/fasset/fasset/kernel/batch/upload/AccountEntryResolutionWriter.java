/*
 * fassets - Project for light-weight tracking of fixed assets
 * Copyright Â© 2018 Edwin Njeru (mailnjeru@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package io.github.fasset.fasset.kernel.batch.upload;

import io.github.fasset.fasset.kernel.book.TransactionBuilder;
import io.github.fasset.fasset.kernel.book.keeper.AccountingEntry;
import io.github.fasset.fasset.kernel.book.keeper.util.ImmutableEntryException;
import io.github.fasset.fasset.kernel.book.keeper.util.UnableToPostException;
import org.springframework.batch.item.ItemWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;

/**
 * AccountingEntry objects generated by the batch processor are persisted to the data sink using a service of our choice that converts those into Account objects and AccountingTransaction items
 *
 * @author edwin.njeru
 * @version $Id: $Id
 */
@Component("accountEntryResolutionProcessor")
public class AccountEntryResolutionWriter implements ItemWriter<List<AccountingEntry>> {

    private final TransactionBuilder transactionBuilder;

    @Autowired
    AccountEntryResolutionWriter(TransactionBuilder transactionBuilder) {
        this.transactionBuilder = transactionBuilder;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void write(List<? extends List<AccountingEntry>> list) throws Exception {


        list.stream().map(transactionBuilder::createTransaction).forEach(entryTransaction -> {
            try {
                entryTransaction.post();
            } catch (UnableToPostException | ImmutableEntryException e) {
                e.printStackTrace();
            }
        });

    }
}
